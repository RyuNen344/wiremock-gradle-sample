import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile
import org.openapitools.generator.gradle.plugin.OpenApiGeneratorPlugin
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    alias libs.plugins.org.jetbrains.kotlin.jvm
    alias libs.plugins.org.jetbrains.kotlin.plugin.spring
    alias libs.plugins.org.springframework.boot
    alias libs.plugins.nl.littlerobots.version.catalog.update
    alias libs.plugins.org.openapi.generator
    alias libs.plugins.com.diffplug.spotless
}

kotlin {
    compilerOptions {
        jvmTarget = JvmTarget.fromTarget(libs.versions.jdk.get())
        freeCompilerArgs = [
            '-Xjsr305=strict',
        ]
    }
}

sourceSets.main {
    java.srcDirs += project.layout.buildDirectory.dir("generated/openapi/stub/src/main/java")
    kotlin.srcDirs += project.layout.buildDirectory.dir("generated/openapi/model/src/main/kotlin")
}

dependencies {
    implementation libs.org.springframework.boot.devtools
    implementation libs.org.springframework.boot.starter
    implementation libs.com.fasterxml.jackson.databind
    // for @Nullable annotation
    implementation libs.com.google.findbugs
    implementation libs.org.wiremock.jetty
}

def openApiGeneratesTask = tasks.register("openApiGenerates") {
    outputs.cacheIf { false }
    group = OpenApiGeneratorPlugin.pluginGroup
    dependsOn(tasks.withType(GenerateTask).matching { !it.name.endsWith("openApiGenerate") })
}

tasks.withType(KotlinJvmCompile).configureEach {
    dependsOn(openApiGeneratesTask)
}

tasks.register("openApiGenerateStub", GenerateTask) { task ->
    generatorName.set("java-wiremock")
    outputDir.set(project.layout.buildDirectory.dir("generated/openapi/stub").orNull.asFile.path)
    configOptions = [
        dateLibrary: "java8",
    ]
    globalProperties = [
        apis  : "",
        models: "",
    ]
    tasks.named("spotlessJava").orNull.dependsOn(task)
}

tasks.register("openApiGenerateModel", GenerateTask) { task ->
    generatorName.set("kotlin-wiremock")
    outputDir.set(project.layout.buildDirectory.dir("generated/openapi/model").orNull.asFile.path)
    configOptions = [
        dateLibrary: "java8",
    ]
    globalProperties = [
        apis  : "",
        models: "",
    ]
    tasks.named("spotlessKotlin").orNull.dependsOn(task)
}

tasks.withType(GenerateTask).configureEach {
    group = OpenApiGeneratorPlugin.pluginGroup
    verbose.set(false)
    cleanupOutput.set(true)
    inputSpec.set(project.layout.settingsDirectory.file("petstore.yaml").asFile.path)
    apiPackage.set("org.openapi.example.api")
    modelPackage.set("org.openapi.example.model")
}

spotless {
    enforceCheck = false
    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'
        targetExclude '.idea'
        trimTrailingWhitespace()
        leadingTabsToSpaces()
        endWithNewline()
    }

    java {
        googleJavaFormat().aosp().reorderImports(true)
    }

    kotlin {
        ktfmt().kotlinlangStyle().configure {
            it.setMaxWidth(140)
            it.setBlockIndent(4)
            it.setContinuationIndent(4)
            it.setRemoveUnusedImports(true)
            it.setManageTrailingCommas(true)
        }
    }
}

versionCatalogUpdate {
    sortByKey = true
    keep {
        keepUnusedVersions = true
    }
}
